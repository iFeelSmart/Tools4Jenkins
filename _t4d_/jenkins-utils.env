
_wksJenkinsFindPipelinesPath(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsFindPipelinesPath
#   - Name :
#       _wksJenkinsFindPipelinesPath
###
#   - Synopsis :
#       Show All Path that will be built for all jobs available
###
#   - Usage :
#       _wksJenkinsFindPipelinesPath
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########


    local _XmlFile="$WS_CI_CONFIG_FILE"
    local _PipeLines="$(_t4dFindMarkerInXML pipeline uuid $_XmlFile)"
    for _Pipe in $(echo $_PipeLines); do
        local _PipeName="$(_t4dFindDataInXmlV2 pipeline uuid $_Pipe name $_XmlFile)"
        local _PipeFolderBase="$(_t4dFindDataInXmlV2 pipeline uuid $_Pipe folderBase $_XmlFile)"
        local _PipePath="$(_wksJenkinsGetRootPath $_PipeName $_PipeFolderBase $_XmlFile)"
        echo "$(_t4dPromptVarWithSpace 35 "$_Pipe") -> $_PipePath" | tr -d '%'
    done

###############################
}

_wksJenkinsRestartServer(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsRestartServer
#   - Name :
#       _wksJenkinsRestartServer
###
#   - Synopsis :
#       restart Jenkins server
###
#   - Usage :
#       _wksJenkinsRestartServer
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########

    sudo service jenkins restart

###############################
}

_wksJenkinsSyncFolder(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsSyncFolder
#   - Name :
#       _wksJenkinsSyncFolder
###
#   - Synopsis :
#       Explore inventory then create all folders in jenkins server
###
#   - Usage :
#       _wksJenkinsSyncFolder
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########

    _t4dPromptSquare "Folder Sync"
    local _XmlFile="$WS_CI_CONFIG_FILE"
    local _Folders="$(_t4dFindMarkerInXML folder name $_XmlFile)"
    for _folder in $(echo $_Folders); do
        local _FolderBase="$(_t4dFindDataInXmlV2 folder name "$_folder" folderBase "$_XmlFile")"
        
        if [[ "$_FolderBase" != "" ]]; then
            local _RootPath="$(_wksJenkinsGetRootPath "$_folder" "${_FolderBase}" "$_XmlFile")"
            if [[ "$_RootPath" != "/Home" ]]; then
                _wksJenkinsCreateFolder $_RootPath
            fi
        fi
    done 

###############################
}

_wksJenkinsSyncNode(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsSyncNode
#   - Name :
#       _wksJenkinsSyncNode
###
#   - Synopsis :
#       Explore inventory then create all nodes in jenkins server
###
#   - Usage :
#       _wksJenkinsSyncNode
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########

    _t4dPromptSquare "Node Sync"
    local _XmlFile="$WS_CI_CONFIG_FILE"
    local _Nodes="$(_t4dFindMarkerInXML node name $_XmlFile)"
    for _node in $(echo $_Nodes); do
        local _IpAddress="$(_t4dFindDataInXmlV2 node name $_node ip $_XmlFile)"
        local _HomePath="$(_t4dFindDataInXmlV2 node name $_node home $_XmlFile)"
        _wksJenkinsCreateNode "$_node" "${_IpAddress:-Empty}" "${_HomePath:-Empty}"
    done 

###############################
}

_wksJenkinsScanPipeline(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsScanPipeline
#   - Name :
#       _wksJenkinsScanPipeline
###
#   - Synopsis :
#       Explore inventory then scan all branch using jenkins pipeline config
###
#   - Usage :
#       _wksJenkinsScanPipeline
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########

    _t4dPromptSquare "Job Scan Branch" $plpurple
    local _XmlFile="$WS_CI_CONFIG_FILE"
    local _PipeLines="$(_t4dFindMarkerInXML pipeline uuid $_XmlFile)"
    for _Pipe in $(echo $_PipeLines); do
        local _PipeName="$(_t4dFindDataInXmlV2 pipeline uuid $_Pipe name $_XmlFile)"
        local _PipeFolderBase="$(_t4dFindDataInXmlV2 pipeline uuid $_Pipe folderBase $_XmlFile)"
        local _PipePath="$(_wksJenkinsGetRootPath $_PipeName $_PipeFolderBase $_XmlFile | sed "s|$WS_JENKINS_ROOT/jobs/||g" | sed 's|/jobs/|/|g')"
            _t4dDebugLog   "$plog" "Scan $_PipePath"
            ( _t4dSrcJenkinsPagePipelineSync $_PipePath ) &> $WS_LOGFILE
            rm $WS_LOGFILE
    done

###############################
}

_wksJenkinsSyncPipeline(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsSyncPipeline
#   - Name :
#       _wksJenkinsSyncPipeline
###
#   - Synopsis :
#       Explore inventory then create all jobs in jenkins server
###
#   - Usage :
#       _wksJenkinsSyncPipeline
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########

    _t4dPromptSquare "Job Sync"
    local _XmlFile="$WS_CI_CONFIG_FILE"
    local _PipeLines="$(_t4dFindMarkerInXML pipeline uuid $_XmlFile)"
    for _Pipe in $(echo $_PipeLines); do
        local _PipeName="$(_t4dFindDataInXmlV2 pipeline uuid $_Pipe name $_XmlFile)"
        local _PipeFolderBase="$(_t4dFindDataInXmlV2 pipeline uuid $_Pipe folderBase $_XmlFile)"
        local _PipeFilterBranch="$(_t4dFindDataInXmlV2 pipeline uuid $_Pipe branchFilter $_XmlFile)"
        local _PipeJenkinsFile="$(_t4dFindDataInXmlV2 pipeline uuid $_Pipe jenkinsfile $_XmlFile)"
        local _RepoGit="$(_t4dFindDataInXmlV2 pipeline uuid $_Pipe repoGit $_XmlFile)"
        local _PipePath="$(_wksJenkinsGetRootPath $_PipeName $_PipeFolderBase $_XmlFile)"

        local _GitSource="$(_wksGitSourceUrl $_RepoGit $_XmlFile)"
        _wksJenkinsCreateJob $_Pipe $_PipePath "$_GitSource" "$_PipeJenkinsFile" "$_PipeFilterBranch"
    done

###############################
}

_wksGitSourceUrl(){
    local _RepoGit=$1
    local _XmlFile=$2
    echo "$(_t4dFindDataInXmlV2 repoGit name $_RepoGit base $_XmlFile)$(_t4dFindDataInXmlV2 repoGit name $_RepoGit key $_XmlFile)/$(_t4dFindDataInXmlV2 repoGit name $_RepoGit name $_XmlFile).git"
}

_wksJenkinsGetRootPath(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsGetRootPath
#   - Name :
#       _wksJenkinsGetRootPath
###
#   - Synopsis :
#       Return RootPath of any folderName
###
#   - Usage :
#       _wksJenkinsGetRootPath <Name> <FolderBase> <XmlFile>
#
###
#   - Example :
#       _wksJenkinsGetRootPath Test Partner inventory/jenkins-ci08
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########

    local _Path=""
    local _Name="$1"
    local _FolderBase="$2"
    local _XmlFile="$3"
    local _Root="$(_t4dFindDataInXmlV2 folder name Home root $_XmlFile)"
    local _Current="$_FolderBase"

    for _Dept in $(seq 1 6); do
        local _Base="$(_t4dFindDataInXmlV2 folder name $_Current folderBase $_XmlFile)"
        if [[ "$_Base" == "" ]]; then
            _Path="$_Root/$(echo $_Path | sed "s|^$_Root/||g")"
        else
            _Path="$_Current/jobs/$_Path"
            _Current="$_Base"
        fi
    done
    _Path="${_Path}$_Name"
    echo "$_Path"

###############################
}

_wksJenkinsCreateNode(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsCreateNode
#   - Name :
#       _wksJenkinsCreateNode
###
#   - Synopsis :
#       Create Node in WS_JENKINS_ROOT/nodes folder
###
#   - Usage :
#       _wksJenkinsCreateNode
#
###
#   - Example :
#       | At Least One Example |
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########

    local _Name="$1"
    local _Ip="$2"
    local _Home="$3"
    if [[ ! -d "$WS_JENKINS_ROOT/nodes/$_Name" ]]; then
        mkdir -p "$WS_JENKINS_ROOT/nodes/$_Name"
        cat $WS_JENKINS_BASE_NODE_CONFIG_FILE   | sed "s|IP_ADDRESS|$_Ip|g" \
                                                | sed "s|_base_|$_Name|g" \
                                                | sed "s|HOME|$_Home|g" > "$WS_JENKINS_ROOT/nodes/$_Name/config.xml"
        _wksUpdateFolderRightsForJenkins "$WS_JENKINS_ROOT/nodes/$_Name"
        _t4dCheckSucceeded "$_Name created"
    else
        _t4dCheckInfo "$_Name Already Exist"
    fi

###############################
}

_wksJenkinsCreateFolder(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsCreateFolder
#   - Name :
#       _wksJenkinsCreateFolder
###
#   - Synopsis :
#       Create Folder in WS_JENKINS_ROOT/jobs using rootPath
###
#   - Usage :
#       _wksJenkinsCreateFolder
#
###
#   - Example :
#       | At Least One Example |
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########
    local _Folder="$1"

    if [[ ! -d $_Folder ]]; then
        mkdir -p "${_Folder}/jobs"
        cat $WS_JENKINS_BASE_FOLDER_CONFIG_FILE > "$_Folder/config.xml"
        _wksUpdateFolderRightsForJenkins $_Folder
        _t4dCheckSucceeded "Folder $_Folder"
    else
        _t4dCheckInfo "Folder $_Folder Already Exist"
    fi


###############################
}

_wksJenkinsCreateJob(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksJenkinsCreateJob
#   - Name :
#       _wksJenkinsCreateJob
###
#   - Synopsis :
#       Create Jobs in WS_JENKINS_ROOT/jobs folder
###
#   - Usage :
#       _wksJenkinsCreateJob <Uuid> <Name>
#
###
#   - Example :
#       _wksJenkinsCreateJob $_PipeName $(_wksJenkinsGetRootPath $_PipeName $_PipeFolderBase $_XmlFile)
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########
    local _Uuid="$1"
    local _Path="$2"
    local _JenkinsFile="${4:-Default}"
    local _GitSource="${3:-Default}"
    local _LibSource="${WS_JENKINS_LIB_SOURCE}"
    local _GitBranchFilter="${5:-Default}"
    if [[ ! -d "$_Path" ]] ; then
        mkdir -p "$_Path"
        cat $WS_JENKINS_BASE_JOB_CONFIG_FILE | sed "s|JENKINSFILE|$_JenkinsFile|g" \
                                            | sed "s|GIT_SOURCE|$_GitSource|g" \
                                            | sed "s|LIB_SOURCE|$_LibSource|g" \
                                            | sed "s%GIT_BRANCH_FILTER%$_GitBranchFilter%g" > "$_Path/config.xml"
        echo "$_Uuid - Last Updated $(date)" > $_Path/source.properties
        _wksUpdateFolderRightsForJenkins $_Path

        _t4dCheckSucceeded "Job $_Path"
        if [[ "$WS_VERBOSE" != "1" ]]; then
            _t4dCheckInfo "    - $_GitSource"
            _t4dCheckInfo "    - $_GitBranchFilter"
            _t4dCheckInfo "    - $_JenkinsFile"
        fi
    else
        if [[ ! -e "$_Path/config.xml" ]]; then
            _t4dCheckWarning "Folder $_Path Already Exist but config.xml file can't be found"
        else
            _t4dCheckInfo "Job $_Path Already Exist"
        fi
        
    fi
    

###############################
}

_wksUpdateFolderRightsForJenkins(){
# Generated From $Tools4Dev_PATH/Templates/function-wks.env
# v1.5.0
###### _wksUpdateFolderRightsForJenkins
#   - Name :
#       _wksUpdateFolderRightsForJenkins
###
#   - Synopsis :
#       jenkins jobs or foler has to be owned by jenkins user and group
###
#   - Usage :
#       _wksUpdateFolderRightsForJenkins <Path>
#
###
###### DOCUMENTATION BLOC #####
########## CODE BLOC ##########
    local _Path=$1
    local _Owner="$(_t4dFindDataInXmlV2 user name owner username $WS_CI_CONFIG_FILE)"
    local _OwnerGroup="$(_t4dFindDataInXmlV2 user name owner group $WS_CI_CONFIG_FILE)"
    if [[ "$USER" == "root" ]]; then
        chown -R $_Owner:$_OwnerGroup $_Path
    fi
###############################
}

