t4dLoadFile "${WS_ROOT}/_t4d_/jenkins-utils.env"
t4dLoadFile "${WS_ROOT}/_t4d_/monitor-utils.env"
t4dLoadFile  "$WS_ROOT/_t4d_/generate-lib-utils.env"



_wksSync(){
# Generated From $Tools4Dev_PATH/utils/templates.env
# v1.5.0
###### _wksSync
#   - Name :
#       _wksSync
###
#   - Synopsis :
#       Oneline Description - Will be visible from wks help
###
#   - Note :
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local CHPWD=1
    local _SourceDir="$WS_ROOT/generated-lib/$WS_CI_SERVER_NAME/index"
    local _RootInstallDir="$(_t4dManifestXmlGetData folder name Home root $WS_CI_CONFIG_FILE)"
    local _DebugMode="forced"
    local _force="false"
    local _restartServer="false"
    local _syncNode="false"

    while [[ "$@" != "" ]]; do
        case "$1" in
            -force|-f)
                _force="true"
            ;;
            -restart)
                _restartServer="true"
            ;;
            -sync-node)
                _syncNode="true"
            ;;
            -src-dir)
                _SourceDir="$2"
                shift
            ;;
            *)
                _t4dDebugLog $perror "Empty or Unknown argument < $1 >"
                return $_t4dErrorCode
            ;;
        esac
        shift
    done

    if [[ -e "$_RootInstallDir" ]]; then
        _DebugMode="false"
    fi
    cd $_SourceDir
    local _LibGitBranch="$(_t4dSrcGitInfoBranch)"
    local _RootPath="$(cat ${_SourceDir}/source.properties | grep "^root=" | cut -d '=' -f2)"
    _t4dPromptObjectCenter "$(_t4dPromptSquare --no-color "$_LibGitBranch")" "$plpurple" "15" 
    _t4dPromptInfo "JENKINS_ROOT_PATH" "$_RootPath" 17 ":" $plcyan

    local _Folders="$(find $_SourceDir | grep '_folder_.properties')"
    
    _t4dDebugLog $plog "Folders"
    for _folder in $(echo $_Folders); do
        local _name="$(echo $_folder | sed "s|${_SourceDir}/||g" | sed 's|.properties$||g')"
        local _path="$(cat $_folder | grep "^folder.path=" | cut -d '=' -f2)"
        if [[ -e "$_path/config.xml" ]]; then
            _t4dCheckSucceeded "$_name Already exist "
        else
            _t4dCheckInfo "$_name"
            if [[ "$_force" == "true" ]] && [[ "$_DebugMode" == "false" ]]; then
                _wksJenkinsCreateFolder $_path
            fi
        fi
    done

    local _Pipelines="$(find $_SourceDir | grep '.properties$' | grep -v 'source.properties' | grep -v '_folder_.properties' )"
    _t4dDebugLog $plog "Pipelines"
    for _pipeline in $(echo $_Pipelines); do
        local _PipeName="$(echo $_pipeline | sed "s|${_SourceDir}/||g" | sed 's|.properties$||g')"
        local _PipePath="$(cat $_pipeline | grep "^pipeline.path=" | cut -d '=' -f2)"
        local _PipeFilterBranch="$(cat $_pipeline | grep -Eo "pipeline.filterBranch=.*" | sed 's|pipeline.filterBranch=||g')"
        local _PipeJenkinsFile="$(cat $_pipeline | grep "^pipeline.jenkinsFile=" | cut -d '=' -f2)"
        local _GitSource="$(cat $_pipeline | grep "^pipeline.repoGit=" | cut -d '=' -f2)"
        local _PipeConfigFile="$(cat $_pipeline | grep "^pipeline.config.file=" | cut -d '=' -f2)"


        if [[ "$_PipeConfigFile" != "" ]] && [[ -e "$_PipeConfigFile" ]]; then
            _PipeConfigFile="$_PipeConfigFile"
        else
            _t4dDebugLog $pwarning "base file $_PipeConfigFile does not exist"
            _t4dDebugLog $pinfo "-> $WS_JENKINS_DEFAULT_BASE_JOB_CONFIG_FILE"
            _PipeConfigFile="$WS_JENKINS_DEFAULT_BASE_JOB_CONFIG_FILE"
        fi

        
        if [[ -e "$_PipePath/config.xml" ]]; then
            _t4dCheckSucceeded "$_PipeName Already exist "
        else
            _t4dCheckInfo "$_PipeName"
            _t4dDebugLog "      >" "$_PipePath"
            if [[ "$_force" == "true" ]] && [[ "$_DebugMode" == "false" ]]; then
                _wksJenkinsCreateJob "$_PipeName" "$_PipePath" "$_GitSource" "$_PipeJenkinsFile" "$_PipeFilterBranch" "$_PipeConfigFile"
            fi
        fi
    done
    if [[ "$_syncNode" == "true" ]] && [[ "$_force" == "true" ]]; then
        _wksJenkinsSyncNode
    fi
    if [[ "$_restartServer" == "true" ]] && [[ "$_force" == "true" ]]; then
        _wksJenkinsRestartServer
        _t4dPromptEchoTimer 45 "Waiting for Jenkins :"
    fi
    # _wksJenkinsScanPipeline

###############################
}

_wksMonitor(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _wksMonitor
#   - Name:
#       _wksMonitor
###
#   - Synopsis:
#       Oneline Description - Will be visible from wks help
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _COLOR="$plwhite"
    local _Cent="$(_t4dPromptVarWithSpace $(expr $(expr $(_t4dPromptSize) - 90 ) / 2 ) "")"
    local _Sep="${_COLOR}|${pstd}"
    local _Nodes="$(_t4dManifestXmlGetMarker node name $WS_CI_CONFIG_FILE)"
    if [[ "$1" != "" ]]; then
        _Nodes="$(echo $_Nodes | grep "$1")"
    fi
    
    alias Header.Name="_t4dPromptVarCenterWithChar          --color \"$plpurple\" 20  'Name'        ' '"
    alias Data.Name.OSX="_t4dPromptVarCenterWithChar        --color \"$plcyan\" 20"
    alias Data.Name.Linux="_t4dPromptVarCenterWithChar      --color \"$plblue\"   20"
    alias Header.T4dVersion="_t4dPromptVarCenterWithChar    --color \"$plpurple\" 10  'T4D'         ' '"
    alias Header.DiskUsage="_t4dPromptVarCenterWithChar     --color \"$plpurple\" 23  'Disk Freespace'  ' '"
    alias Header.OsVersion="_t4dPromptVarCenterWithChar     --color \"$plpurple\" 12   'OS'         ' '"
    alias Header.ClangVersion="_t4dPromptVarCenterWithChar  --color \"$plpurple\" 10  'Clang'       ' '"
    alias Header.XcodeVersion="_t4dPromptVarCenterWithChar  --color \"$plpurple\" 10  'Xcode'       ' '"
    # alias Data.Line=""
    Data.Line(){
        local _Color="$1"
        local _Name="$2"
        local _Size="${3:-10}"
        echo "$(_t4dPromptVarCenterWithChar  --color $_Color $_Size  "${_Name}"       ' ')"
    }

    echo "${_Cent}$(_t4dPromptVarCenterWithChar --color "$_COLOR" 92 '' '+')" | sed 's|%||g'
    echo "${_Cent}${_Sep}$(Header.Name)${_Sep}$(Header.T4dVersion)${_Sep}$(Header.DiskUsage)${_Sep}$(Header.OsVersion)${_Sep}$(Header.ClangVersion)${_Sep}$(Header.XcodeVersion)${_Sep}" | sed 's|%||g'
    echo "${_Cent}${_Sep}$(Data.Line " " " " 19)${_Sep}$(Data.Line " " " " 9)${_Sep}$(_t4dPromptVarCenterWithChar --color $pigrey 23 "<Free> (<Used>+)" ' ')${_Sep}$(Data.Line " " " " 11)${_Sep}$(Data.Line " " " " 9)${_Sep}$(Data.Line " " " " 9)${_Sep}" | sed 's|%||g' | sed 's|+|%|g'
    echo "${_Cent}$(_t4dPromptVarCenterWithChar --color "$_COLOR" 92 '' '+')" | sed 's|%||g'
    for _Node in $(echo $_Nodes); do
        local _Ip="$(_t4dManifestXmlGetData node name $_Node ip $WS_CI_CONFIG_FILE)"
        local _type="$(_t4dManifestXmlGetData node name $_Node host $WS_CI_CONFIG_FILE)"
        local _Username="$(_t4dManifestXmlGetData credentials name default username $WS_CI_CONFIG_FILE)"
        
        if [[ "$(ping -c 1 -t 1 -W 1 $_Ip 2> /dev/null | grep -Eo ' 0.0% packet loss')" == ' 0.0% packet loss' ]]; then
            if [[ "$_type" == "linux" ]]; then
                local _Data="$(_t4dSrcFileSystemSshT4dOutput $_Username@$_Ip '/home/shared/Tools4Dev' '_t4dSystemHealthInfo')"
                local _version="$(      echo $_Data | grep 'T4D_VERSION' | cut -d '=' -f2)"
                local _OSversion="$(    echo $_Data | grep 'SYSTEM_VERSION' | cut -d '=' -f2)"
                local _ClangVersion="$( echo $_Data | grep 'CLANG_VERSION' | cut -d '=' -f2)"
                local _DiskUsage="$(    echo $_Data | grep 'DISK_AVAILABLE_SPACE' | cut -d '=' -f2)"
                local _DiskCapacity="$( echo $_Data | grep 'DISK_PERCENTAGE' | cut -d '=' -f2)"
                local _DiskTotal="$(    echo $_Data | grep 'DISK_USED' | cut -d '=' -f2)"
                
                echo "${_Cent}${_Sep}$(Data.Name.Linux $_Node ' ')${_Sep}$(Data.Line $pstd $_version)${_Sep}$(_wksMonitorParseDiskUsage $_DiskUsage $_DiskCapacity $_DiskTotal)${_Sep}$(Data.Line $pstd $_OSversion 12 )${_Sep}$(Data.Line $pstd $_ClangVersion)${_Sep}$(Data.Line " " " " 9)${_Sep}" | sed 's|%||g' | sed 's|+|%|g'
            else
                local _Data="$(_t4dSrcFileSystemSshT4dOutput $_Username@$_Ip '/Users/Shared/Tools4Dev' '_t4dSystemHealthInfo')"
                local _version="$(      echo $_Data | grep 'T4D_VERSION' | cut -d '=' -f2)"
                local _OSversion="$(    echo $_Data | grep 'SYSTEM_VERSION' | cut -d '=' -f2)"
                local _XcodeVersion="$( echo $_Data | grep 'XCODE_VERSION' | cut -d '=' -f2)"
                local _ClangVersion="$( echo $_Data | grep 'CLANG_VERSION' | cut -d '=' -f2)"
                local _DiskUsage="$(    echo $_Data | grep 'DISK_AVAILABLE_SPACE' | cut -d '=' -f2)"
                local _DiskCapacity="$( echo $_Data | grep 'DISK_PERCENTAGE' | cut -d '=' -f2)"
                local _DiskTotal="$(    echo $_Data | grep 'DISK_USED' | cut -d '=' -f2)"

                echo "${_Cent}${_Sep}$(Data.Name.OSX $_Node ' ')${_Sep}$(Data.Line $pstd $_version)${_Sep}$(_wksMonitorParseDiskUsage $_DiskUsage $_DiskCapacity $_DiskTotal)${_Sep}$(Data.Line $pstd $_OSversion 12 )${_Sep}$(Data.Line $pstd $_ClangVersion)${_Sep}$(Data.Line $pstd ${_XcodeVersion})${_Sep}" | sed 's|%||g' | sed 's|+|%|g'
            fi
        else
            echo "${_Cent}${_Sep}$(_t4dPromptVarCenterWithChar --color $pigrey 20 $_Node ' ')${_Sep}$(Data.Line " " " " 9)${_Sep}$(Data.Line " " " " 22)${_Sep}$(Data.Line " " " " 11)${_Sep}$(Data.Line " " " " 9)${_Sep}$(Data.Line " " " " 9)${_Sep}" | sed 's|%||g'
        fi
    done
    echo "${_Cent}$(_t4dPromptVarCenterWithChar --color "$_COLOR" 92 '' '+')" | sed 's|%||g'
#    _t4dDebugLog $pinfo "_wksMonitor not defined yet"
###############################
}

_wksGenerateLib(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.7.0
###### _wksGenerateLib
#   - Name:
#       _wksGenerateLib
###
#   - Synopsis:
#       Oneline Description - Will be visible from wks help
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local CHPWD=1
    local _DefaultServers="$(ls $WS_ROOT/srv)"
    local _Servers="${1:-$_DefaultServers}"
    local _Version="$(_wksGetVersion)"
    for _server in $(echo $_Servers); do
        if [[ -e "$WS_ROOT/srv/$_server/configuration.groovy" ]] && [[ -e "$WS_ROOT/generated-lib/$_server" ]]; then
            _t4dDebugLog $plog "$_server"
            cd "$WS_ROOT/generated-lib/$_server"
            
            rm -rf "${WS_ROOT}/generated-lib/$_server/src"
            cat "$WS_ROOT/_t4d_/readme.in" | sed "s|<NAME>|$_server|g" > "${WS_ROOT}/generated-lib/$_server/README.md"
            cp -r "${WS_ROOT}/src" "${WS_ROOT}/generated-lib/$_server/"
            if [[ -e "$WS_ROOT/srv/$_server/project" ]]; then
                cp -r "$WS_ROOT/srv/$_server/project" "${WS_ROOT}/generated-lib/$_server/src/"
            fi
            if [[ -e "$WS_ROOT/srv/$_server/slaves" ]]; then
                cp -rf "$WS_ROOT/srv/$_server/slaves" "${WS_ROOT}/generated-lib/$_server/src/"
            fi
            cp -rf "$WS_ROOT/srv/$_server/configuration.groovy" "${WS_ROOT}/generated-lib/$_server/src/system/jenkins/"
        else
            _t4dDebugLog $pskip "$_server"
        fi
    done


###############################
}

_wksGenerateIndex(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _wksGenerateIndex
#   - Name:
#       _wksGenerateIndex
###
#   - Synopsis:
#       Oneline Description - Will be visible from wks help
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local CHPWD=1
    local _DefaultServers="$(ls $WS_ROOT/srv)"
    local _Version="$(_wksGetVersion)"
    local _InstallPrefix="${1:-"$WS_ROOT/generated-lib/$WS_CI_SERVER_NAME"}"
    if [[ -e "$WS_CI_CONFIG_FILE" ]] && [[ -e "$WS_ROOT/generated-lib/$WS_CI_SERVER_NAME" ]]; then
        local _IndexRoot="${_InstallPrefix}/index"
        rm -rf "${_IndexRoot}"
        mkdir -p "${_IndexRoot}"
        _t4dDebugLog $plog "$WS_CI_SERVER_NAME"
        echo "date=$(date '+%y-%m-%d')" > $_IndexRoot/source.properties
        echo "root=$(_t4dManifestXmlGetData folder name Home root $WS_CI_CONFIG_FILE)" >> $_IndexRoot/source.properties
        
        local _XmlFile="$WS_CI_CONFIG_FILE"
        local _Root="$(_t4dManifestXmlGetData folder name Home root $_XmlFile)"

        #Folder
        _t4dPromptSquare "Folders" $pblue
        local _Folders="$(_t4dManifestXmlGetMarker folder uuid $_XmlFile)"
        for _folder in $(echo $_Folders); do
            local _FolderName="$(_t4dManifestXmlGetData folder uuid "$_folder" name "$_XmlFile")"
            local _FolderBase="$(_t4dManifestXmlGetData folder uuid "$_folder" folderBase "$_XmlFile")"
            
            if [[ "$_FolderBase" != "" ]]; then
                local _RootPath="$(_wksJenkinsGetRootPath "$_FolderName" "${_FolderBase}" "$_XmlFile")"
                local _AbsolutePath="$(echo $_RootPath| sed "s|$_Root/||g" | sed 's|/jobs/|/|g' | tr '[:upper:]' '[:lower:]')"
                local _PropertiesFile="$_IndexRoot/$_AbsolutePath/_folder_.properties"
                if [[ "$_RootPath" != "/Home" ]]; then
                    _t4dDebugLog $plog "$_folder - $_AbsolutePath"
                    mkdir -p "$_IndexRoot/$_AbsolutePath"
                    echo "folder.name=$_folder" > $_PropertiesFile
                    echo "folder.path=$_RootPath" >> $_PropertiesFile
                    echo "folder.type=default" >> $_PropertiesFile
                else
                    _t4dDebugLog $pinfo "Home"
                fi
            fi
        done 

        #Pipeline
        _t4dPromptSquare "Pipeline" $pblue
        local _PipeLines="$(_t4dManifestXmlGetMarker pipeline uuid $_XmlFile)"
        local _PipeConfigFile="$WS_JENKINS_DEFAULT_BASE_JOB_CONFIG_FILE"

        for _Pipe in $(echo $_PipeLines); do
            local _PipeName="$(_t4dManifestXmlGetData pipeline uuid $_Pipe name $_XmlFile)"
            local _PipeFolderBase="$(_t4dManifestXmlGetData pipeline uuid $_Pipe folderBase $_XmlFile)"
            local _PipeFilterBranch="$(_t4dManifestXmlGetData pipeline uuid $_Pipe branchFilter $_XmlFile)"
            local _PipeJenkinsFile="$(_t4dManifestXmlGetData pipeline uuid $_Pipe jenkinsfile $_XmlFile)"
            local _RepoGit="$(_t4dManifestXmlGetData pipeline uuid $_Pipe repoGit $_XmlFile)"
            local _PipePath="$(_wksJenkinsGetRootPath $_PipeName $_PipeFolderBase $_XmlFile)"
            local _GitSource="$(_wksGitSourceUrl $_RepoGit $_XmlFile)"
            local _PipeType="$(_t4dManifestXmlGetData pipeline uuid $_Pipe kind $_XmlFile)"
            
            if [[ "$_PipeType" != "" ]]; then
                _PipeConfigFile="$WS_JENKINS_ROOT/jobs/_Base_/jobs/$_PipeType/config.xml"
            fi

            local _AbsolutePath="$(echo $_PipePath| sed "s|$_Root/||g" | sed 's|/jobs/|/|g' | tr '[:upper:]' '[:lower:]')"
            local _PropertiesFile="$_IndexRoot/${_AbsolutePath}.properties"
            _t4dDebugLog $plog "$_Pipe - $_AbsolutePath.properties"
            if [[ -e "$(dirname $_PropertiesFile)/_folder_.properties" ]]; then
                echo "pipeline.name=$_PipeName" > $_PropertiesFile
                echo "pipeline.filterBranch=$_PipeFilterBranch" >> $_PropertiesFile
                echo "pipeline.jenkinsFile=$_PipeJenkinsFile" >> $_PropertiesFile
                echo "pipeline.repoGit=$_GitSource" >> $_PropertiesFile
                echo "pipeline.path=$_PipePath" >> $_PropertiesFile
                echo "pipeline.config.file=$_PipeConfigFile" >> $_PropertiesFile
            else
                _t4dDebugLog $perror "cannot find folder base $(dirname $_PropertiesFile)"
                return $_t4dErrorCode
            fi
            
        done
    fi
###############################
}

_wksGenerate(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates.env
# v1.8.0
###### _wksGenerate
#   - Name:
#       _wksGenerate
###
#   - Synopsis:
#       Oneline Description - Will be visible from wks help
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    _wksGenerateLib $WS_CI_SERVER_NAME
    _wksGenerateIndex
###############################
}

_wksInstall(){
# Generated From $Tools4Dev_PATH/Engine/G4d/templates-project.env
# v1.8.0
###### _wksInstall
#   - Name:
#       _wksInstall
###
#   - Synopsis:
#       Oneline Description - Will be visible from wks help
###
#   - Note:
#       <Required>
#       [Optionnal]
#       {XXXXXXX}       = Value To Be Changed, if {URL} then replace {URL} with a valid URL
###
###### DOCUMENTATION BLOC #####
########### CODE BLOC #########
    local _t4dErrorCode=1
    local _Platform="$(echo $T4D_PLATFORM_NAME | sed 's|.env$||g')"

    if [[ "$_Platform" == "Fedora" ]]; then
        # https://www.jenkins.io/doc/book/installing/linux/#red-hat-centos

        _t4dDebugLog $plog "Install java 11"
        sudo dnf install java-11-openjdk -y

        _t4dDebugLog $plog "querry jenkins dependencies"
        
        sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
        sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
        sudo dnf upgrade
        # Add required dependencies for the jenkins package

        _t4dDebugLog $plog "Install jenkins"
        sudo dnf install jenkins -y

        _t4dDebugLog $plog "daemon config"
        sudo systemctl daemon-reload

        sudo systemctl enable jenkins
        sudo systemctl start jenkins

        if [[ "$WS_JENKINS_HOST_FIREWALL" == "true" ]]; then
            _t4dDebugLog $plog "firewall config"
            YOURPORT=$WS_JENKINS_HOST_PORT
            PERM="--permanent"
            SERV="$PERM --service=jenkins"

            local _FirewallCmds=("$PERM --new-service=jenkins")

            for _FirewallCmd in $_FirewallCmds; do
                _t4dDebugLog $plog "$_FirewallCmd"
                firewall-cmd $(echo $_FirewallCmd) || true
            done

            local _ShortJenkinsPort="$SERV --set-short=\"Jenkins ports\""
            _t4dDebugLog $plog "$_ShortJenkinsPort"
            firewall-cmd $(echo $_ShortJenkinsPort)

            local _JenkinsPortException="$SERV --set-description=\"Jenkins port exceptions\""
            _t4dDebugLog $plog "$_JenkinsPortException"
            firewall-cmd $(echo $_JenkinsPortException)

            local _JenkinsPortTcp="$SERV --add-port=$YOURPORT/tcp"
            _t4dDebugLog $plog "$_JenkinsPortTcp"
            firewall-cmd $(echo $_JenkinsPortTcp)

            local _JenkinsAddService="$PERM --add-service=jenkins"
            _t4dDebugLog $plog "$_JenkinsAddService"
            firewall-cmd $(echo $_JenkinsAddService)

            local _JenkinsZonePublic="--zone=public --add-service=http --permanent"
            _t4dDebugLog $plog "$_JenkinsZonePublic"
            firewall-cmd $(echo $_JenkinsZonePublic)

            local _FirewallReload="--reload"
            _t4dDebugLog $plog "$_FirewallReload"
            firewall-cmd $(echo $_FirewallReload)

        fi
    else
        _t4dDebugLog $pwarning "Jenkins install is not available yet on $_Platform"
    fi
###############################
}
