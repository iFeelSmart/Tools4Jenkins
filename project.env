#### PROJECT HEADER BLOC
# Generated From $Tools4Dev_PATH/Utils/templates.env
# This documentation will be read and compile for man usage, MarkDown file and shell documentation
# 1.6.0
#
#   - Name :
#       <PROJECT NAME>
###
#   - Prefix :
#       wk
###
#   - Description :
#       A textual description of the functioning of the command or function.
###
#   - Working process :
#           *
#       
###
#   - Modules :
#       Will Be Generated Automatically
###
#   - WKS Options :
#       Will Be Generated Automatically
###
#   - Commands :
#       Will Be Generated Automatically
###

#   - Doctor :
#       Will Be Generated Automatically
###
#   - Supported Platform :
#       * OSX ( 10.12.6 or higher )
#       * Fedora ( 25 or higher )
###
#   - Author(s):
#       - Quentin NIO
#
###
#   - Template:
#       Generated From 0-Example-0 Project
#       v1.0.1
#
###
#### HEADER BLOC ####
wks(){
###### wks
#   - Name :
#       wks
###
#   - Synopsis :
#       Main Function that contains list of all available specific workspace behavior
###
###### DOCUMENTATION BLOC #####
#
########## CODE BLOC ##########

    (
        set -e
        case $1 in 
            sync)           _wksSync ${@:2}                 ;;
            doctor)         _wksDoctor ${@:2}               ;;
            generate-lib)   _wksGenerateLib ${@:2}            ;;
            monitor)        _wksMonitor ${@:2}              ;;
            help|'')        _wksHelp ${@:2}                 ;;
            *)
                _t4dDebugLog $perror "${plyellow}wks $1 ${pstd}- Option ${plyellow}${1}${pstd} not available for this project"
            ;;
        esac
    )
    #ALL COMMAND ARE LAUNCHED IN A SUBSHELL
    #This is here to stop command at the first untracked error
    #We Also need to check the subshell output in order to identified which kind of error is sent
    _wksParseReturnCode $? _WS_ERROR $WS_LOGFILE
    return $_WS_ERROR

###############################
}
_wksHelp(){
###### _wksHelp
#   - Name :
#       _wksHelp
###
#   - Synopsis :
#       Parse project Header to show user a ready to read shell documentation
###
###### DOCUMENTATION BLOC ##### 
    local _wksContent="$(_t4dDocGetFunctionContent wks)"
    if [[ $# -eq 1 ]] && [[ "$(_t4dDocGetOptionsList "$_wksContent" | grep "^$1")" != "" ]]; then
        local _OptionHiddenCallName="$(_t4dDocGetOptionsHiddenCall "$_wksContent" $1)"
        t4dHelp $_OptionHiddenCallName | sed "s|$_OptionHiddenCallName|wks $1|g"
    elif [[ "$1" == "" ]] || [[ "$1" == "wks" ]]; then
        _wksLogo doc
        t4dHelp $WS_ROOT/project.env
    else 
        t4dHelp $@
    fi
    echo ""
    echo ""
    echo ""
  
}
_wksInit(){
# Generated From $Tools4Dev_PATH/Templates/function.env
# v1.3.0
###### _wksInit
#   - Name :
#       _wksInit
###
#   - Description :
#       This content will load your environment and Tools4Dev from scratch
#       This should not be used anywhere else than project.env file
#
###
###### DOCUMENTATION BLOC #####
    #
    ######### DEFAULT Tools4Dev_PATH Definition #################
    if [[ -z $Tools4Dev_PATH ]]; then                           #
        if [[ "$(uname -s)" == "Darwin" ]]; then                #
            #MacOS                                              #
            export Tools4Dev_PATH="/Users/Shared/Tools4Dev"     #
        else                                                    #
            #Linux                                              #
            export Tools4Dev_PATH="/home/shared/Tools4Dev"      #
        fi                                                      #
    fi                                                          #
    #############################################################
    #
    #
    #
    #
    ######### WS_ROOT                 ###########################
    export WS_ROOT="$PWD"

    #############################################################
    #
    ######### WksLoad
    _wksLoad
    #############################################################
    #
    #
    #
    ########## Aliases 
    # alias wksPloup='wks configure && wks build'
    # alias wksRebuild='wks build && wks install'
    # alias wkg='gik'
    # alias wkr='wks ci-run'
    # alias wkc='wks configure'
    #############################################################
    ######### Multi Repo Notification ###########################
###############################
}

_wksLoad(){
###### _wksLoad
#   - Name :
#       _wksLoad
###
#   - Synopsis :
#       Here you can configure your project
###
###### DOCUMENTATION BLOC #####

    if [[ -f $Tools4Dev_PATH/tools4Dev.env ]]; then
        source $Tools4Dev_PATH/tools4Dev.env

        _t4dPromptSquare "Project $(basename $WS_ROOT)" $plblue
        mkdir -p $WS_ROOT/output
        ###### Modules
        t4dLoadModule jks
        t4dLoadModule bb8
        t4dLoadCompletion
        #################
        if [[ "${_wksHelper}" != "done" ]]; then _wksHelp && export _wksHelper="done"; fi

    else
        _wksFatalError "wks might need Tools4Dev environment that need to be cloned into $Tools4Dev_PATH"
    fi
###############################
}
_wksLogo(){

    local _color=${1:-$plpurple}
    local center="$(_t4dPromptCenterSpace "34" | sed "s|-||g")"
    l1="##      ##     ##   ##    #####  "
    l2="##  ##  ##    ##  ##     ##   ## "
    l3="## #### ##   #####        ##     "
    l4="###    ###  ##   ##   ##    ##   "
    l5="##      ## ##     ##   #####     "
    if [[ "$1" == "doc" ]]; then
        local _Content="${l1}%${l2}%${l3}%${l4}%${l5}"
        _t4dDocWks ${_Content} ${pipurple}
    elif [[ "$1" == "doctor" ]]; then
        local _Content="${l1}%${l2}%${l3}%${l4}%${l5}"
        _t4dDocWks ${_Content} ${pipurple} "Doctor"
    else
        local _Content="${l1}%${l2}%${l3}%${l4}%${l5}"
        _t4dDocWks ${_Content} ${pipurple} "$WS_PROJECT_NAME"
    fi
}

_wksFatalError(){
    echo -e "\033[1;31m"
    echo -e "                            __---__"
    echo -e "                         _-       _--______"
    echo -e "                    __--( /     \\ )XXXXXXXXXXXXX_"
    echo -e "                  --XXX(   O   O  )XXXXXXXXXXXXXXX-"
    echo -e "                 /XXX(       U     )        XXXXXXX\\"
    echo -e "               /XXXXX(              )--_  XXXXXXXXXXX\\"
    echo -e "              /XXXXX/ (      O     )   XXXXXX   \XXXXX\\"
    echo -e "              XXXXX/   /            XXXXXX   \\__ \\XXXXX----"
    echo -e "              XXXXXX__/          XXXXXX         \\__----  -"
    echo -e "      ---___  XXX__/          XXXXXX      \\__         ---"
    echo -e "        --  --__/   ___/\  XXXXXX            /  ___---="
    echo -e "          -_    ___/    XXXXXX              '--- XXXXXX"
    echo -e "            --\\/XXX\ XXXXXX                      /XXXXX"
    echo -e "              \\XXXXXXXXX                        /XXXXX/"
    echo -e "               \\XXXXXX                        _/XXXXX/"
    echo -e "                 \\XXXXX--__/              __-- XXXX/"
    echo -e "                  --XXXXXXX---------------  XXXXX--"
    echo -e "                     \XXXXXXXXXXXXXXXXXXXXXXXX-"
    echo -e "                       --XXXXXXXXXXXXXXXXXX-"
    echo -e "                 * * * * * who ya gonna call? * * * * *"
    echo -e "                       * * * Your DevOps !! * * *"
    echo -e "                             * * * * * * * *"
    echo -e "$1"
    echo -e "Please try >source tools4Dev.env<. If it doesn't work then :"
    echo -e "1- Call your Project Manager"
    echo -e "2- Call your DevOps or Admin System"
    echo -e "3- Call 911"
    echo -e ""
    echo -e ""
    echo -e "\033[m"
    echo -e "\033[1;32m TIPS : ssh access problem - can't access to BitBucket server ?"
    echo -e "\033[1;32m TIPS : Okay that was a joke please don't call 911"
    return 911
}
_wksInit
